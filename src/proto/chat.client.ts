// @generated by protobuf-ts 2.9.1
// @generated from protobuf file "chat.proto" (package "main", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { ChatService } from "./chat";
import type { UserList } from "./chat";
import type { ReceiveMsgRequest } from "./chat";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { Empty } from "./chat";
import type { ChatMessage } from "./chat";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { JoinResponse } from "./chat";
import type { User } from "./chat";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service main.ChatService
 */
export interface IChatServiceClient {
    /**
     * @generated from protobuf rpc: join(main.User) returns (main.JoinResponse);
     */
    join(input: User, options?: RpcOptions): UnaryCall<User, JoinResponse>;
    /**
     * @generated from protobuf rpc: sendMsg(main.ChatMessage) returns (main.Empty);
     */
    sendMsg(input: ChatMessage, options?: RpcOptions): UnaryCall<ChatMessage, Empty>;
    /**
     * @generated from protobuf rpc: receiveMsg(main.ReceiveMsgRequest) returns (stream main.ChatMessage);
     */
    receiveMsg(input: ReceiveMsgRequest, options?: RpcOptions): ServerStreamingCall<ReceiveMsgRequest, ChatMessage>;
    /**
     * @generated from protobuf rpc: getAllUsers(main.Empty) returns (main.UserList);
     */
    getAllUsers(input: Empty, options?: RpcOptions): UnaryCall<Empty, UserList>;
}
/**
 * @generated from protobuf service main.ChatService
 */
export class ChatServiceClient implements IChatServiceClient, ServiceInfo {
    typeName = ChatService.typeName;
    methods = ChatService.methods;
    options = ChatService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: join(main.User) returns (main.JoinResponse);
     */
    join(input: User, options?: RpcOptions): UnaryCall<User, JoinResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<User, JoinResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: sendMsg(main.ChatMessage) returns (main.Empty);
     */
    sendMsg(input: ChatMessage, options?: RpcOptions): UnaryCall<ChatMessage, Empty> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<ChatMessage, Empty>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: receiveMsg(main.ReceiveMsgRequest) returns (stream main.ChatMessage);
     */
    receiveMsg(input: ReceiveMsgRequest, options?: RpcOptions): ServerStreamingCall<ReceiveMsgRequest, ChatMessage> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<ReceiveMsgRequest, ChatMessage>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: getAllUsers(main.Empty) returns (main.UserList);
     */
    getAllUsers(input: Empty, options?: RpcOptions): UnaryCall<Empty, UserList> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<Empty, UserList>("unary", this._transport, method, opt, input);
    }
}
